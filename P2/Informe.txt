Integrantes del grupo
-----------------------

Julian Barcia Facal julian.bfacal
Tome Maseda Dorado tome.maseda


Maquina Utilizada
-----------------------
Modelo:Portátil HP 15-da0051ns
Memoria:7,7 GiB
Procesador:Intel® Core™ i5-8250U CPU @ 1.60GHz × 8 
Tarjeta Gráfica: Intel® UHD Graphics 620 (Kabylake GT2)
GNOME: 3.28.2
Tipo Sistema Operativo : 64 bits 
Almacenamiento: 54,1 GiB



	Esta práctica se basa en la implementación de dos algoritmos en C que ordenan, de forma ascendente, un vector dado. Los algoritmos utilizados para dicha disposición son, ordenación por inserción y ordenación shell. Además, en esta práctica se busca resolver la complejidad 
de cada método de forma empírica y determinar finalmente, cual es el más eficiente.

	Con este fin se utilizan las siguientes tablas.Estas se componen de  n (tamaño de los vectores utilizados),t(n) (tiempos de ejecución en microsegundos µs ), siendo las consecutivas columnas los valores para obtener las cotas subestimada, ajustada y sobrestimada
respectivamente.

Si el tiempo de ejecución t(n) no alcanza el tiempo umbral de confianza de 500 µs el algoritmo pasa a ejecutarse 10.000 ocasiones.

=======================
*: tiempo promedio (en μs) de 10.000 ejecuciones del algoritmo
=======================

Ordenacion por Insercion con inicializacion aleatoria

          n          t(n)         t(n)/n^1.8      t(n)/n^2     t(n)/n^2.2
*       500         161.9131       0.002245       0.000648     0.0001869 
       1000         682.0000       0.002715       0.000682     0.0001713
       2000        2663.0000       0.003045       0.000666     0.0001456
       4000       10565.0000       0.003469       0.000660     0.0001257
       8000       41292.0000       0.003893       0.000645     0.0001069
      16000      165325.0000       0.004476       0.000646     0.0000932
      32000      663185.0000       0.005157       0.000648     0.0000813
      64000     2644274.0000       0.005904       0.000646     0.0000706


						 C=0.000660
Cota Subestimada = n^1.8
Cota Ajustada  = n^2
Cota Sobrestimada = n^2.2


Ordenacion por Insercion con inicializacion descendente

          n          t(n)         t(n)/n^1.8      t(n)/n^2     t(n)/n^2.2
*       500         316.0108       0.004381       0.001264     0.0003647
       1000        1270.0000       0.005056       0.001270     0.0003190
       2000        5139.0000       0.005875       0.001285     0.0002809
       4000       20954.0000       0.006880       0.001310     0.0002493 #
       8000       82918.0000       0.007818       0.001296     0.0002147
      16000      330893.0000       0.008959       0.001293     0.0001865
      32000     1319424.0000       0.010259       0.001288     0.0001618
      64000     5288294.0000       0.011808       0.001291     0.0001412


						 C=0.00129
Cota Subestimada = n^1.8
Cota Ajustada  = n^2
Cota Sobrestimada = n^2.2



Ordenacion por Insercion con inicializacion ascendente

          n            t(n)        t(n)/n^0.5      t(n)/n      t(n)/n^1.2
*       500           1.7380       0.077726       0.003476     0.0010030
*      1000           3.4861       0.110240       0.003486     0.0008757
*      2000           7.2125       0.161276       0.003606     0.0007886
*      4000          13.9154       0.220022       0.003479     0.0006623
*      8000          27.8485       0.311356       0.003481     0.0005769
*     16000          56.0339       0.442987       0.003502     0.0005053
*     32000         112.2028       0.627233       0.003506     0.0004404
*     64000         224.6041       0.887826       0.003509     0.0003837
*    128000         448.9741       1.254921       0.003508     0.0003339


						C=0.003510
Cota Subestimada = n^0.5
Cota Ajustada  = n
Cota Sobrestimada = n^1.2



Ordenacion por Shell con inicializacion aleatoria

          n          t(n)         t(n)/n        t(n)/n^1.2    t(n)/n^1.4
*       500          53.5338       0.107068       0.030893     0.0089139
*      1000         124.1543       0.124154       0.031186     0.0078336
*      2000         284.4077       0.142204       0.031096     0.0067999
       4000         641.0000       0.160250       0.030506     0.0058073
       8000        1474.0000       0.184250       0.030534     0.0050602
      16000        3360.0000       0.210000       0.030297     0.0043709
      32000        7698.0000       0.240563       0.030213     0.0037946
      64000       17580.0000       0.274687       0.030033     0.0032837
     128000       41098.0000       0.321078       0.030561     0.0029089


						C=(0.030200,
						0.030700)
Cota Subestimada = n
Cota Ajustada  = n^1.2
Cota Sobrestimada = n^1.4

						

Ordenacion por Shell con inicializacion descendente

          n          t(n)         t(n)/n^0.8      t(n)/n^1.1   t(n)/n^1.6
*       500          23.0404       0.159703       0.024753     0.0011070 #
*      1000          55.8528       0.222354       0.027993     0.0008852 #
*      2000         123.1098       0.281494       0.028785     0.0006436
*      4000         268.4969       0.352607       0.029287     0.0004631
       8000         574.0000       0.432952       0.029209     0.0003266
      16000        1245.0000       0.539353       0.029555     0.0002337
      32000        2669.0000       0.664093       0.029559     0.0001652
      64000        5712.0000       0.816290       0.029511     0.0001167
     128000       12161.0000       0.998163       0.029312     0.0000819


						C=0.029400
Cota Subestimada = n^0.8
Cota Ajustada  = n^1.1
Cota Sobrestimada = n^1.6
=======================
#: En vectores de 500 y 1000 elementos los tiempos que se obtienen generan una anomalía al no ser tan precisa su medida.
=======================


Ordenacion por Shell con inicializacion ascendente

          n            t(n)         t(n)/n      t(n)/n^1.13  t(n)/n^1.5
*       500          14.9239       0.029848       0.015067     0.0013348 #
*      1000          33.9597       0.033960       0.015884     0.0010739 #
*      2000          76.1867       0.038093       0.016510     0.0008518
*      4000         170.0938       0.042523       0.017077     0.0006724
*      8000         372.2593       0.046532       0.017315     0.0005202
      16000         818.0000       0.051125       0.017627     0.0004042
      32000        1775.0000       0.055469       0.017721     0.0003101
      64000        3825.0000       0.059766       0.017692     0.0002362
     128000        8209.0000       0.064133       0.017591     0.0001793



						C=0.017600

Cota Subestimada = n
Cota Ajustada  = n^1.13
Cota Sobrestimada = n^1.5
=======================
#: Con vectores de tamaño (n) reducido los tiempos que se generan son menos precisos.
=======================


Conclusiones
----------------------


1-. La ordenación por inserción,es de orden cuadrático en el caso aleatorio y descendente, en los cuales se requiere de una reordenación. 
	Sin embargo, es de orden lineal en el caso ascendente, en el cual ya se encuentra ordenado.

2-. La ordenación por Shell, es para todo los casos próxima al tipo lineal, con complejidad que varía entre 1.1 y 1.2, sin llegar a ser de 		orden cuadráctico en ningún momento.
	
3-. Según los tiempos de ejecución, la ordenación por Shell resulta más efectiva en términos generales al reducir significativamente el tiempo 		en vectores aleatorios y descendentes, aunque en el caso de ya estar ordenado penaliza respecto al método por inserción.



Integrantes del grupo
-----------------------

Julian Barcia Facal julian.bfacal
Tome Maseda Dorado tome.maseda


Maquina Utilizada
-----------------------
Modelo:Portátil HP 15-da0051ns
Memoria:7,7 GiB
Procesador:Intel® Core™ i5-8250U CPU @ 1.60GHz × 8 
Tarjeta Gráfica: Intel® UHD Graphics 620 (Kabylake GT2)
GNOME: 3.28.2
Tipo Sistema Operativo : 64 bits 
Almacenamiento: 54,1 GiB



	Esta práctica tiene dos objectivos. El primero consiste en la implementación y comprobación del correcto funcionamiento del
algoritmo de Dijkstra, que calcula el camino mínimo de cada vértice a los restantes. Como segunda tarea se busca hallar empíricamente ,
la complejidad computacional de dicho algoritmo usando grafos completos, no dirigidos.


 
 FIGURA 2                                                         FIGURA 3 
**********************************************************       **********************************************************                    
Matriz adyacente						 Matriz adyacente
  0   1   8   4   7                                                0   1   4   7
  1   0   2   6   5                                                1   0   2   8
  8   2   0   9   5 						   4   2   0   3
  4   6   9   0   3 						   7   8   3   0 
  7   5   5   3   0 

Distancias							 Distancias
  0   1   3   4   6 						   0   1   3   6
  1   0   2   5   5 						   1   0   2   5
  3   2   0   7   5 						   3   2   0   3 
  4   5   7   0   3 					           6   5   3   0 
  6   5   5   3   0   

==========================================================================================
	Ambas tablas de distancias coinciden con las dadas en el enunciado de la práctica.	
==========================================================================================	
					

	Para hallar la complejidad computacional se utilizan las siguientes tablas. Estas se componen de  n (tamaño de los vectores
 utilizados) , t(n) (tiempos de ejecución en microsegundos µs ) , siendo las consecutivas columnas los valores para obtener las 
cotas subestimada, ajustada y sobrestimada respectivamente.

Si el tiempo de ejecución t(n) no alcanza el tiempo umbral de confianza de 500 µs el algoritmo pasa a ejecutarse 10.000 ocasiones.

=======================
*: tiempo promedio (en μs) de 10.000 ejecuciones del algoritmo
=======================

Comprobacion empirica de la complejidad del algoritmo de calculo de distancias minimas 

           n            t(n)     t(n)/n^2.5       t(n)/n^3      t(n)/n^2.9   t(n)/n^3.5 
*         25      176.782500       0.056570       0.011314      0.015610      0.002263 #
          50     1110.000000       0.062791       0.008880      0.013131      0.001256
         100     6666.000000       0.066660       0.006666      0.010565      0.000667
         200    45147.000000       0.079809       0.005643      0.009586      0.000399
         400   338583.000000       0.105807       0.005290      0.009631      0.000265
         800  2663218.000000       0.147123       0.005202      0.010150      0.000184


						C=(0.006000    C=(0.010000 
						-0.005000)	-0.009500)
						
				 
Cota Subestimada = n^2.5
Cota Ajustada  = n^3
Cota Sobrestimada = n^2.5

=======================
#: Para tamaños de vector más pequeños como 25 Dijkstra no resulta tan preciso, generando una anomalía.
=======================

Conclusiones
----------------------

1-.La comlejidad del algoritmo de Dijkstra se comprueba que es de orden O(n^3). En las tablas también se muestran los tiempos de 
ejecución para una cota de n^2.9, los cuales demuestran que esta también podría ser seleccionada como cota ajustada.








